#from asyncio.windows_events import null
import csv
from string import printable
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from apyori import apriori
#import tabulate as tb
from mlxtend.frequent_patterns import association_rules
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, fpmax, fpgrowth
data_sets = pd.read_csv("datasets.csv", header=None, dtype=str)
print("\n")
print(data_sets)

# waw = [["Apple", "Beer", "Rice", "Chicken"],
#        ["Apple", "Beer", "Rice"],
#         ["Apple","Beer"],
#         ["Apple", "Pear"],
#         ["Milk","Beer", "Rice", "Chicken"],
#         ["Milk","Beer", "Rice"],
#         ["Milk","Beer"],
#         ["Milk","Pear"]]

waw = data_sets.apply(lambda x: x.dropna().tolist(), axis=1).tolist()
te = TransactionEncoder()
item = te.fit(waw).transform(waw)
#TransactionEncoder object, we can transform this dataset into an array format suitable for typical machine learning APIs.
#Via the fit method, the TransactionEncoder learns the unique labels in the dataset, and via the transform method,
#it transforms the input dataset (a Python list of lists) into a one-hot encoded NumPy boolean array:
df = pd.DataFrame(item,columns = te.columns_)
num_records = len(df)
print("\n number of records in dataframe",num_records)
print("Converted to Dataframe \n",df)



frequent_itemsets= apriori(df,min_support = .2, use_colnames = True,max_len = 4)
print("\n",frequent_itemsets)
association_rules = association_rules(frequent_itemsets, metric = "confidence", min_threshold =.50)  
print("\n",association_rules.to_string())
#The generate_rules takes dataframes of frequent itemsets as produced by the apriori,
#fpgrowth, or fpmax functions in mlxtend.association. To demonstrate the usage of the generate_rules method,
#we first create a pandas DataFrame of frequent itemsets as generated by the fpgrowth function:

       
conviction_values = association_rules['conviction']
valid_convictions = conviction_values[(conviction_values > 1) & (conviction_values != np.inf)]
num_valid_convictions = len(valid_convictions)
print("\nNumber of convictions greater than 1 excluding infinity: ", num_valid_convictions)